{
  "name": "sns",
  "version": "0.4.4",
  "homepage": "https://github.com/dfinity/dfx-extensions",
  "authors": "DFINITY",
  "summary": "Initialize, deploy and interact with an SNS",
  "categories": [
    "sns",
    "nns"
  ],
  "keywords": [
    "sns",
    "nns",
    "deployment"
  ],
  "description": null,
  "subcommands": {
    "add-sns-wasm-for-tests": {
      "about": "Add a wasms for one of the SNS canisters, skipping the NNS proposal, for tests",
      "args": {
        "canister_type": {
          "about": "The type of the canister that the wasm is for. Must be one of \"archive\", \"root\", \"governance\", \"ledger\", \"swap\", \"index\"",
          "long": null,
          "short": null,
          "multiple": false,
          "values": 1
        },
        "network": {
          "about": "The network to deploy to. This can be \"local\", \"ic\", or the URL of an IC network",
          "long": "network",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "override_sns_wasm_canister_id_for_tests": {
          "about": "The canister ID of SNS-WASM to use instead of the default",
          "long": "override-sns-wasm-canister-id-for-tests",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "wasm_file": {
          "about": "The wasm faile to be added to a test instance of SNS-WASM",
          "long": "wasm-file",
          "short": null,
          "multiple": false,
          "values": 1
        }
      },
      "subcommands": null
    },
    "deploy-testflight": {
      "about": "Deploy an sns directly to a subnet, skipping the sns-wasms canister. The SNS canisters remain controlled by the developer after deployment. For use in tests only",
      "args": {
        "init_config_file": {
          "about": "The initial config file, this file should have all the necessary parameters to deploy an SNS. See command \"init-config-file\"",
          "long": "init-config-file",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "initial_cycles_per_canister": {
          "about": "The amount of cycles to initialize each SNS canister with. This can be omitted when deploying locally",
          "long": "initial-cycles-per-canister",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "network": {
          "about": "The network to deploy to. This can be \"local\", \"ic\", or the URL of an IC network",
          "long": "network",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "sns_canister_ids_save_to": {
          "about": "Saves the SNS canister IDs in the specified json file for sns-quill",
          "long": "sns-canister-ids-save-to",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "verbose": {
          "about": "Print all error and info messages",
          "long": "verbose",
          "short": null,
          "multiple": false,
          "values": 0
        },
        "wallet_canister_override": {
          "about": "The canister ID of the wallet to use on this subnet",
          "long": "wallet-canister-override",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "wasms_dir": {
          "about": "The directory with SNS canister WASMs",
          "long": "wasms-dir",
          "short": null,
          "multiple": false,
          "values": 1
        }
      },
      "subcommands": null
    },
    "download": {
      "about": "Downloads SNS canister versions that are specified in your dfx.json (which probably got there through the `Import` command)",
      "args": {
        "ic_commit": {
          "about": "IC commit of SNS canister WASMs to download",
          "long": "ic-commit",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "wasms_dir": {
          "about": "Path to store downloaded SNS canister WASMs",
          "long": "wasms-dir",
          "short": null,
          "multiple": false,
          "values": 1
        }
      },
      "subcommands": null
    },
    "import": {
      "about": "Subcommand for importing sns API definitions and canister IDs. This and `Download` are only useful for SNS testflight",
      "args": {
        "network_mapping": {
          "about": "Networks to import canisters ids for. --network-mapping <network name in both places> --network-mapping <network name here>=<network name in project being imported> Examples: --network-mapping ic --network-mapping ic=mainnet",
          "long": "network-mapping",
          "short": null,
          "multiple": false,
          "values": 1
        }
      },
      "subcommands": null
    },
    "init-config-file": {
      "about": "Manage the config file where the initial sns parameters are set",
      "args": {
        "init_config_file_path": {
          "about": "Path to the init config file",
          "long": "init-config-file-path",
          "short": null,
          "multiple": false,
          "values": 1
        }
      },
      "subcommands": {
        "validate": {
          "about": "Validates that a init_config_file is well formed",
          "args": {},
          "subcommands": null
        }
      }
    },
    "list": {
      "about": "List SNSes",
      "args": {
        "json": {
          "about": "Output the SNS information as JSON (instead of a human-friendly table)",
          "long": "json",
          "short": null,
          "multiple": false,
          "values": 0
        }
      },
      "subcommands": null
    },
    "neuron-id-to-candid-subaccount": {
      "about": "Converts a Neuron ID to a candid subaccount blob suitable for use in the `manage_neuron` method on SNS Governance",
      "args": {
        "escaped": {
          "about": "If true, print an escaped version of the candid, useful for pasting into bash for example. Default is false",
          "long": "escaped",
          "short": null,
          "multiple": false,
          "values": 0
        },
        "neuron_id": {
          "about": "The SNS neuron ID to be converted to a candid subaccount blob",
          "long": null,
          "short": null,
          "multiple": false,
          "values": 1
        }
      },
      "subcommands": null
    },
    "prepare-canisters": {
      "about": "Adds or removes NNS root as a controller to canisters controlled by the current dfx identity to prepare for SNS Decentralization. NNS root must be added as a controller to all canisters that will be controlled by the SNS before the proposal is submitted",
      "args": {
        "network": {
          "about": "The network to deploy to. This can be \"local\", \"ic\", or the URL of an IC network",
          "long": "network",
          "short": null,
          "multiple": false,
          "values": 1
        }
      },
      "subcommands": {
        "add-nns-root": {
          "about": "Add NNS Root as a co-controller of one or more canisters",
          "args": {
            "CANISTER": {
              "about": "The canisters you want to operate on",
              "long": null,
              "short": null,
              "multiple": false,
              "values": "1..18446744073709551614"
            }
          },
          "subcommands": null
        },
        "remove-nns-root": {
          "about": "Remove NNS Root as a co-controller of one or more canisters",
          "args": {
            "CANISTER": {
              "about": "The canisters you want to operate on",
              "long": null,
              "short": null,
              "multiple": false,
              "values": "1..18446744073709551614"
            }
          },
          "subcommands": null
        }
      }
    },
    "propose": {
      "about": "Submit an NNS proposal to create new SNS",
      "args": {
        "init_config_file": {
          "about": "Path to a configuration file specifying the SNS to be created",
          "long": null,
          "short": null,
          "multiple": false,
          "values": 1
        },
        "network": {
          "about": "The network to deploy to. This can be \"local\", \"ic\", or the URL of an IC network",
          "long": "network",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "neuron_id": {
          "about": "The neuron with which to make the proposal. The current dfx identity must be able to operate this neuron. If not specified, it will be assumed that the current dfx identity has a neuron with memo == 0. --neuron_memo is an alternative to this",
          "long": "neuron-id",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "neuron_memo": {
          "about": "This is an alternative to --neuron_id for specifying which neuron to make the proposal with. This is used in conjunction with the current principal to calculate the subaccount (belonging to the NNS governance canister) that holds the ICP that backs the proposing neuron",
          "long": "neuron-memo",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "save_to": {
          "about": "An optional flag to save the ProposalId of a successfully submitted CreateServiceNervousSystem proposal to the filesystem. The file must be writeable, and will be created if it does not exist. The ProposalId will be saved in JSON format. For example:",
          "long": "save-to",
          "short": null,
          "multiple": false,
          "values": 1
        },
        "skip_confirmation": {
          "about": "If this flag is set, the proposal will be submitted without asking for confirmation. This is useful for automated scripts",
          "long": "skip-confirmation",
          "short": null,
          "multiple": false,
          "values": 0
        },
        "test_neuron_proposer": {
          "about": "This is a \"secret menu\" item. It is (yet) another alternative to --neuron_id (and --neuron_memo). As the name implies, this is only useful when running against a local instance of NNS (when deployed as described in the sns-testing Github repo). In addition to specifying which neuron to propose with, this also controls the principal that sends the request",
          "long": "test-neuron-proposer",
          "short": null,
          "multiple": false,
          "values": 0
        }
      },
      "subcommands": null
    }
  },
  "dependencies": {
    "dfx": ">=0.17.0"
  },
  "canister_type": null
}