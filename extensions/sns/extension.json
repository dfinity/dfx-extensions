{
  "name": "sns",
  "version": "0.4.1",
  "homepage": "https://github.com/dfinity/dfx-extensions",
  "authors": "DFINITY",
  "summary": "Toolkit for simulating decentralizing a dapp via SNS.",
  "categories": [
    "sns",
    "nns"
  ],
  "keywords": [
    "sns",
    "nns",
    "deployment"
  ],
  "dependencies": {
    "dfx": ">=0.17.0"
  },
  "subcommands": {
    "deploy-testflight": {
      "about": "Deploy an sns directly to a local replica or the Internet Computer, skipping the sns-wasms canister. The SNS canisters remain controlled by the developer after deployment. For use in tests only",
      "args": {
        "network": {
          "about": "The network to deploy to. This can be \"local\", \"ic\", or the URL of an IC network"
        },
        "init-config-file": {
          "about": "The initial config file, this file should have all the necessary parameters to deploy an SNS. See command \"dfx sns init-config-file\""
        }
      }
    },
    "download": {
      "about": "Subcommand for downloading SNS WASMs.",
      "args": {
        "ic_commit": {
          "about": "IC commit of SNS canister WASMs to download",
          "long": "ic-commit"
        },
        "wasms_dir": {
          "about": "Path to store downloaded SNS canister WASMs",
          "long": "wasms-dir"
        }
      }
    },
    "import": {
      "about": "Subcommand for importing sns API definitions and canister IDs.",
      "args": {
        "network_mapping": {
          "about": "Networks to import canisters ids for.\n  --network-mapping <network name in both places>\n  --network-mapping <network name here>=<network name in project being imported>\nExamples:\n  --network-mapping ic\n  --network-mapping ic=mainnet",
          "long": "network-mapping"
        }
      }
    },
    "init-config-file": {
      "about": "Subcommands for working with configuration.",
      "subcommands": {
        "validate": {
          "about": "Command line options for validating an SNS configuration."
        }
      }
    },
    ,
    "neuron-id-to-candid-subaccount": {
      "about": "Converts a Neuron ID to a candid subaccount blob suitable for use in the `manage_neuron` method on SNS Governance",
      "args": {
        "neuron_id": {
          "about": "The (hex-encoded) SNS neuron ID to convert to a candid subaccount blob"
        },
        "escaped": {
          "about": "If true, print the escaped version of the candid string, useful for pasting into a bash script for example. Default is false",
          "long": "escaped",
          "values": 0
        }
      }
    },
    "prepare-canisters": {
      "about": "Subcommand for preparing dapp canister(s) for 1-proposal SNS creation.",
      "subcommands": {
        "add-nns-root": {
          "about": "Subcommand for adding NNS Root as a co-controller of the dapp canister.",
          "args": {
            "canister_ids": {
              "about": "CanisterId of a dapp canister your current dfx identity controls.",
              "values": "unlimited"
            }
          }
        },
        "remove-nns-root": {
          "about": "Subcommand for removing NNS Root as a co-controller of the dapp canister.",
          "args": {
            "canister_ids": {
              "about": "CanisterId of a dapp canister your current dfx identity controls.",
              "values": "unlimited"
            }
          }
        }
      }
    },
    "propose": {
      "about": "Subcommand for submitting a CreateServiceNervousSystem NNS Proposal.",
      "args": {
        "network": {
          "about": "The network to deploy to. This can be \"local\", \"ic\", or the URL of an IC network.",
          "multiple": false
        },
        "neuron_id": {
          "about": "The neuron with which to make the proposal. The current dfx identity must be able to operate this neuron. If not specified, it will be assumed that the current dfx identity has a neuron with memo == 0. --neuron_memo is an alternative to this",
          "long": "neuron-id"
        },
        "neuron_memo": {
          "about": "This is an alternative to --neuron_id for specifying which neuron to make the proposal with. This is used in conjunction with the current principal to calculate the subaccount (belonging to the NNS governance canister) that holds the ICP that backs the proposing neuron",
          "long": "neuron-memo"
        },
        "test_neuron_proposer": {
          "about": "This is a \"secret menu\" item. It is (yet) another alternative to --neuron_id (and --neuron_memo). As the name implies, this is only useful when running against a local instance of NNS (when deployed as described in the sns-testing Github repo). In addition to specifying which neuron to propose with, this also controls the principal that sends the request",
          "long": "test-neuron-proposer",
          "values": 0
        },
        "skip-confirmation": {
          "about": "If set, the command will not ask for confirmation before submitting the proposal",
          "long": "skip-confirmation",
          "values": 0
        }
      }
    }
  }
}