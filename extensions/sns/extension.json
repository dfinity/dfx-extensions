{
  "name": "sns",
  "version": "0.2.0",
  "homepage": "https://github.com/dfinity/dfx-extensions",
  "authors": "DFINITY",
  "summary": "Toolkit for simulating decentralizing a dapp via SNS.",
  "categories": [
    "sns",
    "nns"
  ],
  "keywords": [
    "sns",
    "nns",
    "deployment"
  ],
  "subcommands": {
    "config": {
      "about": "Subcommands for working with configuration.",
      "subcommands": {
        "create": {
          "about": "Command line options for creating an SNS configuration."
        },
        "validate": {
          "about": "Command line options for validating an SNS configuration."
        }
      }
    },
    "deploy": {
      "about": "Subcommand for creating an SNS."
    },
    "prepare-canisters": {
      "about": "Subcommand for preparing dapp canister(s) for 1-proposal SNS creation.",
      "subcommands": {
        "add-nns-root": {
          "about": "Subcommand for adding NNS Root as a co-controller of the dapp canister.",
          "args": {
            "canister_ids": {
              "about": "CanisterId of a dapp canister your current dfx identity controls.",
              "values": "unlimited"
            }
          }
        },
        "remove-nns-root": {
          "about": "Subcommand for removing NNS Root as a co-controller of the dapp canister.",
          "args": {
            "canister_ids": {
              "about": "CanisterId of a dapp canister your current dfx identity controls.",
              "values": "unlimited"
            }
          }
        }
      }
    },
    "propose": {
      "about": "Subcommand for submitting a CreateServiceNervousSystem NNS Proposal.",
      "args": {
        "init_config_file": {
          "about": "Path to a configuration file specifying the SNS to be created.",
          "multiple": false
        },
        "neuron_id": {
          "about": "The neuron with which to make the proposal. The current dfx identity must be able to operate this neuron (as a hotkey for instance).",
          "long": "neuron-id"
        },
        "neuron_memo": {
          "about": "The memo to use in conjunction with the current dfx identity to identify the neuron with which to make the proposal. This calculates the subaccount address with which the Neuron was created with. The current dfx identity must be able to operate this neuron (as a hotkey for instance).",
          "long": "neuron-memo"
        },
        "test_neuron_proposer": {
          "about": "A test only alternative to `--neuron-id` and `--neuron-memo` that works on a local dfx server where an NNS is installed with the test neuron. If used with the mainnet version of the ic, `dfx sns propose` will return a failure.",
          "long": "test-neuron-proposer"
        }
      }
    },
    "import": {
      "about": "Subcommand for importing sns API definitions and canister IDs.",
      "args": {
        "network_mapping": {
          "about": "Networks to import canisters ids for.\n  --network-mapping <network name in both places>\n  --network-mapping <network name here>=<network name in project being imported>\nExamples:\n  --network-mapping ic\n  --network-mapping ic=mainnet",
          "long": "network-mapping"
        }
      }
    },
    "download": {
      "about": "Subcommand for downloading SNS WASMs.",
      "args": {
        "ic_commit": {
          "about": "IC commit of SNS canister WASMs to download",
          "long": "ic-commit"
        },
        "wasms_dir": {
          "about": "Path to store downloaded SNS canister WASMs",
          "long": "wasms-dir"
        }
      }
    }
  }
}
